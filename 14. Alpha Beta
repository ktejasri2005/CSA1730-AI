def alphabeta(depth, node_index, is_max, values, alpha, beta):
    if depth == 3:  # leaf node
        return values[node_index]

    if is_max:
        best = -float('inf')
        # Left child
        val = alphabeta(depth + 1, node_index * 2, False, values, alpha, beta)
        best = max(best, val)
        alpha = max(alpha, best)
        if beta <= alpha:
            return best
        # Right child
        val = alphabeta(depth + 1, node_index * 2 + 1, False, values, alpha, beta)
        best = max(best, val)
        alpha = max(alpha, best)
        return best
    else:
        best = float('inf')
        # Left child
        val = alphabeta(depth + 1, node_index * 2, True, values, alpha, beta)
        best = min(best, val)
        beta = min(beta, best)
        if beta <= alpha:
            return best
        # Right child
        val = alphabeta(depth + 1, node_index * 2 + 1, True, values, alpha, beta)
        best = min(best, val)
        beta = min(beta, best)
        return best

# Example leaf node values (tree of depth 3 => 8 leaves)
values = [3, 12, 8, 2, 4, 6, 14, 5]

alpha = -float('inf')
beta = float('inf')

best_val = alphabeta(0, 0, True, values, alpha, beta)
print("Best value:", best_val)
