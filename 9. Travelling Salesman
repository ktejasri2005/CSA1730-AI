from itertools import permutations

def tsp(graph, start):
    n = len(graph)
    cities = list(range(n))
    cities.remove(start)

    min_cost = float('inf')
    best_path = []

    for perm in permutations(cities):
        cost = 0
        k = start
        for j in perm:
            cost += graph[k][j]
            k = j
        cost += graph[k][start]  # return to start

        if cost < min_cost:
            min_cost = cost
            best_path = [start] + list(perm) + [start]

    return min_cost, best_path

# Example graph (distance matrix)
graph = [
    [0, 10, 15, 20],
    [10, 0, 35, 25],
    [15, 35, 0, 30],
    [20, 25, 30, 0]
]

cost, path = tsp(graph, 0)
print(f"Minimum cost: {cost}")
print(f"Best path: {path}")
