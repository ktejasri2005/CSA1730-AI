from heapq import heappush, heappop

# Manhattan distance heuristic
def heuristic(state, goal):
    dist = 0
    for i in range(1, 9):
        xi, yi = divmod(state.index(i), 3)
        xg, yg = divmod(goal.index(i), 3)
        dist += abs(xi - xg) + abs(yi - yg)
    return dist

# Generate neighbors by moving the blank tile
def neighbors(state):
    idx = state.index(0)
    moves = []
    x, y = divmod(idx, 3)
    dirs = [(-1,0),(1,0),(0,-1),(0,1)]  # up, down, left, right
    for dx, dy in dirs:
        nx, ny = x + dx, y + dy
        if 0 <= nx < 3 and 0 <= ny < 3:
            nidx = nx * 3 + ny
            lst = list(state)
            lst[idx], lst[nidx] = lst[nidx], lst[idx]
            moves.append(tuple(lst))
    return moves

def solve(start, goal):
    pq = []
    heappush(pq, (heuristic(start, goal), 0, start, []))
    visited = set()
    
    while pq:
        est, cost, state, path = heappop(pq)
        
        if state in visited:
            continue
        visited.add(state)
        
        if state == goal:
            return path + [state]
        
        for nei in neighbors(state):
            if nei not in visited:
                heappush(pq, (cost + 1 + heuristic(nei, goal), cost + 1, nei, path + [state]))
    
    return None

# Example input
start = (1, 2, 3,
         4, 0, 6,
         7, 5, 8)

goal = (1, 2, 3,
        4, 5, 6,
        7, 8, 0)

solution = solve(start, goal)

if solution:
    for step in solution:
        print(f"{step[0:3]}\n{step[3:6]}\n{step[6:9]}\n")
    print(f"Solved in {len(solution)-1} moves.")
else:
    print("No solution found.")
